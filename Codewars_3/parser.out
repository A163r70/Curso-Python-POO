Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LPAREN
    RPAREN

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assignment SEMICOLON
Rule 2     assignment -> IDENTIFIER ASSIGN expression
Rule 3     expression -> expression PLUS term
Rule 4     expression -> expression MINUS term
Rule 5     expression -> term
Rule 6     term -> term MULTIPLY factor
Rule 7     term -> term DIVIDE factor
Rule 8     term -> factor
Rule 9     factor -> NUMBER
Rule 10    factor -> IDENTIFIER

Terminals, with rules where they appear

ASSIGN               : 2
DIVIDE               : 7
IDENTIFIER           : 2 10
LPAREN               : 
MINUS                : 4
MULTIPLY             : 6
NUMBER               : 9
PLUS                 : 3
RPAREN               : 
SEMICOLON            : 1
error                : 

Nonterminals, with rules where they appear

assignment           : 1
expression           : 2 3 4
factor               : 6 7 8
statement            : 0
term                 : 3 4 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assignment SEMICOLON
    (2) assignment -> . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 3

    statement                      shift and go to state 1
    assignment                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 4


state 3

    (2) assignment -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 5


state 4

    (1) statement -> assignment SEMICOLON .

    $end            reduce using rule 1 (statement -> assignment SEMICOLON .)


state 5

    (2) assignment -> IDENTIFIER ASSIGN . expression
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (5) expression -> . term
    (6) term -> . term MULTIPLY factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6

    expression                     shift and go to state 7
    term                           shift and go to state 8
    factor                         shift and go to state 9

state 6

    (10) factor -> IDENTIFIER .

    MULTIPLY        reduce using rule 10 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 10 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 10 (factor -> IDENTIFIER .)
    SEMICOLON       reduce using rule 10 (factor -> IDENTIFIER .)


state 7

    (2) assignment -> IDENTIFIER ASSIGN expression .
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 2 (assignment -> IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 8

    (5) expression -> term .
    (6) term -> term . MULTIPLY factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 5 (expression -> term .)
    MINUS           reduce using rule 5 (expression -> term .)
    SEMICOLON       reduce using rule 5 (expression -> term .)
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14


state 9

    (8) term -> factor .

    MULTIPLY        reduce using rule 8 (term -> factor .)
    DIVIDE          reduce using rule 8 (term -> factor .)
    PLUS            reduce using rule 8 (term -> factor .)
    MINUS           reduce using rule 8 (term -> factor .)
    SEMICOLON       reduce using rule 8 (term -> factor .)


state 10

    (9) factor -> NUMBER .

    MULTIPLY        reduce using rule 9 (factor -> NUMBER .)
    DIVIDE          reduce using rule 9 (factor -> NUMBER .)
    PLUS            reduce using rule 9 (factor -> NUMBER .)
    MINUS           reduce using rule 9 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 9 (factor -> NUMBER .)


state 11

    (3) expression -> expression PLUS . term
    (6) term -> . term MULTIPLY factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6

    term                           shift and go to state 15
    factor                         shift and go to state 9

state 12

    (4) expression -> expression MINUS . term
    (6) term -> . term MULTIPLY factor
    (7) term -> . term DIVIDE factor
    (8) term -> . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6

    term                           shift and go to state 16
    factor                         shift and go to state 9

state 13

    (6) term -> term MULTIPLY . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6

    factor                         shift and go to state 17

state 14

    (7) term -> term DIVIDE . factor
    (9) factor -> . NUMBER
    (10) factor -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 6

    factor                         shift and go to state 18

state 15

    (3) expression -> expression PLUS term .
    (6) term -> term . MULTIPLY factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> expression PLUS term .)
    MINUS           reduce using rule 3 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 3 (expression -> expression PLUS term .)
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14


state 16

    (4) expression -> expression MINUS term .
    (6) term -> term . MULTIPLY factor
    (7) term -> term . DIVIDE factor

    PLUS            reduce using rule 4 (expression -> expression MINUS term .)
    MINUS           reduce using rule 4 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 4 (expression -> expression MINUS term .)
    MULTIPLY        shift and go to state 13
    DIVIDE          shift and go to state 14


state 17

    (6) term -> term MULTIPLY factor .

    MULTIPLY        reduce using rule 6 (term -> term MULTIPLY factor .)
    DIVIDE          reduce using rule 6 (term -> term MULTIPLY factor .)
    PLUS            reduce using rule 6 (term -> term MULTIPLY factor .)
    MINUS           reduce using rule 6 (term -> term MULTIPLY factor .)
    SEMICOLON       reduce using rule 6 (term -> term MULTIPLY factor .)


state 18

    (7) term -> term DIVIDE factor .

    MULTIPLY        reduce using rule 7 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 7 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 7 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 7 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 7 (term -> term DIVIDE factor .)

